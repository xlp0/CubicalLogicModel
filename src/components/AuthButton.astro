---
interface Props {
  class?: string;
  style?: string;
}

const { class: className, style } = Astro.props;
---

<button
  id="auth-button"
  class:list={[
    "px-4 py-2 rounded-md font-medium transition-colors",
    "bg-blue-600 text-white hover:bg-blue-700",
    "dark:bg-blue-500 dark:hover:bg-blue-600",
    "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
    "dark:focus:ring-offset-gray-900",
    className
  ]}
  style={style}
>
  <slot>Log In</slot>
</button>

<script>
  // This script will be bundled and included only when the component is used
  import { Config } from '../utils/config';

  function initializeAuthButton() {
    const button = document.getElementById('auth-button');
    if (!button) {
      console.error('[Auth] Auth button not found in DOM');
      return;
    }

    // Check authentication status immediately and also when storage changes
    const checkAuthStatus = () => {
      const token = sessionStorage.getItem('auth_token');
      console.debug('[Auth] Checking auth status, token exists:', !!token);

      if (token) {
        fetch('/api/auth/status', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(({ authenticated, user }) => {
          if (authenticated && user) {
            button.textContent = `Log Out (${user.name || user.email})`;
            button.setAttribute('data-action', 'logout');
          } else {
            sessionStorage.removeItem('auth_token');
            button.textContent = 'Log In';
            button.setAttribute('data-action', 'login');
          }
        })
        .catch(error => {
          console.error('[Auth] Failed to check auth status:', error);
          sessionStorage.removeItem('auth_token');
          button.textContent = 'Log In';
          button.setAttribute('data-action', 'login');
        });
      } else {
        button.textContent = 'Log In';
        button.setAttribute('data-action', 'login');
      }
    };

    // Check status when storage changes
    window.addEventListener('storage', (e) => {
      if (e.key === 'auth_token') {
        checkAuthStatus();
      }
    });

    // Initial check
    checkAuthStatus();

    // Add click handler
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const action = button.getAttribute('data-action');

      try {
        if (action === 'logout') {
          // Handle logout
          const token = sessionStorage.getItem('auth_token');
          if (token) {
            await fetch('/api/auth/logout', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            sessionStorage.removeItem('auth_token');
          }
          window.location.reload();
        } else {
          // Handle login
          const config = Config.getInstance();
          if (!config) {
            throw new Error('Missing configuration instance');
          }

          console.debug('[Auth] Starting authentication flow');
          window.location.href = '/api/auth/login';
        }
      } catch (error) {
        console.error('[Auth] Authentication action failed:', error);
      }
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAuthButton);
  } else {
    initializeAuthButton();
  }
</script>

<style>
  #auth-button {
    position: relative;
    min-width: 100px;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 300px;
  }

  #auth-button[data-action="logout"] {
    @apply bg-red-600 hover:bg-red-700;
    @apply dark:bg-red-500 dark:hover:bg-red-600;
  }
</style>
