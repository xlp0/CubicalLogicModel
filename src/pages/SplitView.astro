---
import Layout from '../layouts/Layout.astro';
import SplitLayout from '../components/SplitLayout';
import FloatingNav from '../components/FloatingNav';

const defaultComponent = "Notes";

const panes = [
  {
    importPath: "SearchableCardSelector",
    width: "250px",
    minWidth: "40px",
    componentProps: {
      title: "Component Library",
      isCompact: "auto"
    }
  },
  {
    width: "calc(100% - 650px)",
    minWidth: "400px",
    split: {
      direction: 'vertical',
      sizes: [50, 50],
      panes: [
        {
          importPath: defaultComponent,
          minWidth: "300px",
          componentProps: {
            title: "Notes"
          }
        },
        {
          importPath: "ThreeJsCube",
          minWidth: "300px",
          componentProps: {
            title: "3D View Bottom"
          }
        }
      ]
    }
  },
  {
    importPath: "YouTubePlayer",
    width: "400px",
    minWidth: "300px",
    componentProps: {
      title: "Tutorial",
      videoId: "LWQqE2JcDSQ"
    }
  }
];
---

<Layout title="Split View">
  <div class="fixed inset-0 flex flex-col bg-gray-900 text-gray-100">
    <FloatingNav client:only="react" />
    <div class="flex-1 overflow-hidden">
      <SplitLayout client:only="react" panes={panes} />
    </div>
  </div>
</Layout>

<style>
  /* Split pane styles */
  :global(.split) {
    height: 100%;
    display: flex;
  }

  :global(.split.vertical) {
    flex-direction: column;
  }

  :global(.split.horizontal) {
    flex-direction: row;
  }

  :global(.split-pane) {
    height: 100%;
    overflow: hidden;
  }

  :global(.gutter) {
    background-color: #4a5568;
    background-repeat: no-repeat;
    background-position: 50%;
    transition: background-color 0.15s;
  }

  :global(.gutter:hover) {
    background-color: #718096;
  }

  :global(.gutter.gutter-horizontal) {
    cursor: col-resize;
    width: 4px;
  }

  :global(.gutter.gutter-vertical) {
    cursor: row-resize;
    height: 4px;
  }
</style>

<script>
  // Handle component selection events
  document.addEventListener('componentSelected', (e: any) => {
    const event = e as CustomEvent<{ importPath: string; componentProps: Record<string, any> }>;
    console.log('Component selected:', event.detail);
  });
</script>
