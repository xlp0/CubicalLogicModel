---
import type { FC } from 'react';
import MCard from '../components/MCard';

interface PaneConfig {
  importPath: string;
  componentProps?: Record<string, any>;
  width?: string;
  minWidth?: string;
  flex?: number;
  split?: {
    direction: 'vertical' | 'horizontal';
    sizes: [number, number];
    panes: [PaneConfig, PaneConfig];
  };
}

export interface Props {
  title: string;
  panes: PaneConfig[];
}

const { title, panes } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={title} />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <style>
      html, body { 
        height: 100%; 
        margin: 0; 
        padding: 0;
        overflow: hidden;
      }

      .split-container {
        display: flex;
        width: 100%;
        height: 100vh;
        overflow: hidden;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }

      .pane {
        height: 100%;
        overflow: hidden;
        position: relative;
        background: #1a1a1a;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
      }

      .pane-content {
        flex: 1;
        overflow: hidden;
        position: relative;
        display: flex;
        flex-direction: column;
      }

      .split-pane {
        display: flex;
        width: 100%;
        height: 100%;
        overflow: hidden;
        flex: 1;
      }

      .split-pane.vertical {
        flex-direction: row;
      }

      .split-pane.horizontal {
        flex-direction: column;
      }

      .split-pane > .pane {
        height: auto;
        min-height: 0;
      }

      .split-pane.vertical > .pane {
        height: 100%;
      }

      .split-pane.horizontal > .pane {
        width: 100%;
      }

      .split-pane > .pane > .pane-content {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
      }

      .resizer {
        width: 18px;
        margin: 0 -9px;
        cursor: col-resize;
        background: transparent;
        position: relative;
        z-index: 100;
        flex: 0 0 18px;
      }

      .resizer.horizontal {
        width: 100%;
        height: 18px;
        margin: -9px 0;
        cursor: row-resize;
      }

      .resizer::before {
        content: '';
        position: absolute;
        left: 7px;
        top: 0;
        bottom: 0;
        width: 4px;
        background: #333;
        transition: background 0.2s, width 0.2s;
      }

      .resizer.horizontal::before {
        left: 0;
        right: 0;
        top: 7px;
        width: auto;
        height: 4px;
      }

      .resizer:hover::before,
      .resizer.resizing::before {
        background: #666;
      }

      .resizer.horizontal:hover::before,
      .resizer.horizontal.resizing::before {
        height: 6px;
      }

      .resizer:not(.horizontal):hover::before,
      .resizer:not(.horizontal).resizing::before {
        width: 6px;
      }

      .resizing {
        pointer-events: none;
      }

      .resizing * {
        user-select: none;
      }
    </style>
  </head>
  <body class="h-full bg-gray-900 m-0 overflow-hidden">
    <div class="split-container">
      {panes.map((pane, index) => (
        <>
          <div 
            class="pane"
            data-index={index}
            style={`
              width: ${pane.width || '300px'};
              min-width: ${pane.minWidth || '200px'};
              flex: ${index === panes.length - 1 ? '1 1 auto' : '0 0 auto'};
            `}
          >
            <div class="pane-content">
              {pane.split ? (
                <div class={`split-pane ${pane.split.direction}`}>
                  <div 
                    class="pane"
                    style={`
                      ${pane.split.direction === 'horizontal' ? 'height' : 'width'}: ${pane.split.sizes[0]}%;
                      min-width: ${pane.split.panes[0].minWidth || '200px'};
                      flex: none;
                    `}
                  >
                    <div class="pane-content">
                      <MCard 
                        client:only="react"
                        importPath={pane.split.panes[0].importPath}
                        componentProps={pane.split.panes[0].componentProps}
                      />
                    </div>
                  </div>
                  <div 
                    class={`resizer ${pane.split.direction}`}
                    data-parent-index={index}
                    data-split-direction={pane.split.direction}
                  />
                  <div 
                    class="pane"
                    style={`
                      ${pane.split.direction === 'horizontal' ? 'height' : 'width'}: ${pane.split.sizes[1]}%;
                      min-width: ${pane.split.panes[1].minWidth || '200px'};
                      flex: none;
                    `}
                  >
                    <div class="pane-content">
                      <MCard 
                        client:only="react"
                        importPath={pane.split.panes[1].importPath}
                        componentProps={pane.split.panes[1].componentProps}
                      />
                    </div>
                  </div>
                </div>
              ) : (
                <MCard 
                  client:only="react"
                  importPath={pane.importPath}
                  componentProps={pane.componentProps}
                />
              )}
            </div>
          </div>
          {index < panes.length - 1 && (
            <div 
              class="resizer vertical" 
              data-index={index}
            />
          )}
        </>
      ))}
    </div>

    <script>
      function initializeResizers() {
        const container = document.querySelector('.split-container');
        const resizers = Array.from(document.querySelectorAll('.resizer'));
        
        let isResizing = false;
        let activeResizer = null;
        let startX = 0;
        let startY = 0;
        let startSizes = null;

        function onMouseDown(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const resizer = e.target.closest('.resizer');
          if (!resizer || isResizing) return;

          isResizing = true;
          activeResizer = resizer;
          startX = e.clientX;
          startY = e.clientY;

          const parentIndex = activeResizer.dataset.parentIndex;
          const isHorizontal = activeResizer.classList.contains('horizontal');
          
          if (parentIndex !== undefined) {
            // Handle split pane resizing
            const parentPane = document.querySelector(`.pane[data-index="${parentIndex}"]`);
            const splitPane = parentPane.querySelector('.split-pane');
            const splitPanes = Array.from(splitPane.querySelectorAll(':scope > .pane'));
            
            startSizes = splitPanes.map(pane => {
              const style = window.getComputedStyle(pane);
              const size = isHorizontal ? style.height : style.width;
              return parseFloat(size);
            });
          } else {
            // Handle main pane resizing
            const index = parseInt(resizer.dataset.index);
            const panes = Array.from(container.querySelectorAll(':scope > .pane'));
            startSizes = [
              panes[index].getBoundingClientRect().width,
              panes[index + 1].getBoundingClientRect().width
            ];
          }
          
          activeResizer.classList.add('resizing');
          container.classList.add('resizing');
          
          document.addEventListener('mousemove', onMouseMove);
          document.addEventListener('mouseup', onMouseUp);
        }

        function onMouseMove(e) {
          if (!isResizing || !activeResizer || !startSizes) return;

          e.preventDefault();
          e.stopPropagation();

          const parentIndex = activeResizer.dataset.parentIndex;
          const isHorizontal = activeResizer.classList.contains('horizontal');
          
          if (parentIndex !== undefined) {
            // Handle split pane resizing
            const parentPane = document.querySelector(`.pane[data-index="${parentIndex}"]`);
            const splitPane = parentPane.querySelector('.split-pane');
            const splitPanes = Array.from(splitPane.querySelectorAll(':scope > .pane'));
            
            const delta = isHorizontal ? e.clientY - startY : e.clientX - startX;
            const containerSize = isHorizontal ? splitPane.clientHeight : splitPane.clientWidth;
            const deltaPercent = (delta / containerSize) * 100;

            // Calculate new percentages
            const size1 = Math.max(20, Math.min(80, (startSizes[0] / containerSize * 100) + deltaPercent));
            const size2 = 100 - size1;

            // Apply new sizes
            const prop = isHorizontal ? 'height' : 'width';
            splitPanes[0].style[prop] = `${size1}%`;
            splitPanes[1].style[prop] = `${size2}%`;

            // Trigger resize events for MCard content
            splitPanes.forEach(pane => {
              const mcard = pane.querySelector('.pane-content');
              if (mcard) {
                // Force a reflow
                mcard.style.display = 'none';
                mcard.offsetHeight; // Force reflow
                mcard.style.display = 'flex';
                
                // Dispatch resize event
                const resizeEvent = new Event('resize', { bubbles: true });
                window.dispatchEvent(resizeEvent);
                
                // Update MCard content
                const iframe = mcard.querySelector('iframe');
                if (iframe) {
                  iframe.style.height = '100%';
                  iframe.contentWindow?.dispatchEvent(new Event('resize'));
                }
              }
            });
          } else {
            // Handle main pane resizing
            const index = parseInt(activeResizer.dataset.index);
            const panes = Array.from(container.querySelectorAll(':scope > .pane'));
            const leftPane = panes[index];
            const rightPane = panes[index + 1];
            
            if (!leftPane || !rightPane) return;

            const dx = e.clientX - startX;
            const leftMinWidth = parseInt(leftPane.style.minWidth) || 200;
            const rightMinWidth = parseInt(rightPane.style.minWidth) || 200;
            
            let newLeftWidth = Math.max(leftMinWidth, startSizes[0] + dx);
            let newRightWidth = Math.max(rightMinWidth, startSizes[1] - dx);
            
            const totalWidth = startSizes[0] + startSizes[1];
            
            if (newLeftWidth + newRightWidth > totalWidth) {
              if (dx > 0) {
                newLeftWidth = Math.min(newLeftWidth, totalWidth - rightMinWidth);
                newRightWidth = totalWidth - newLeftWidth;
              } else {
                newRightWidth = Math.min(newRightWidth, totalWidth - leftMinWidth);
                newLeftWidth = totalWidth - newRightWidth;
              }
            }

            if (newLeftWidth >= leftMinWidth && newRightWidth >= rightMinWidth) {
              leftPane.style.width = `${newLeftWidth}px`;
              leftPane.style.flex = '0 0 auto';

              if (index === panes.length - 2) {
                rightPane.style.flex = '1 1 auto';
                rightPane.style.width = 'auto';
              } else {
                rightPane.style.width = `${newRightWidth}px`;
                rightPane.style.flex = '0 0 auto';
              }
            }
          }
        }

        function onMouseUp(e) {
          if (!isResizing) return;

          if (e) {
            e.preventDefault();
            e.stopPropagation();
          }

          isResizing = false;
          startSizes = null;
          
          if (activeResizer) {
            activeResizer.classList.remove('resizing');
            activeResizer = null;
          }
          
          container.classList.remove('resizing');
          
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        }

        resizers.forEach(resizer => {
          resizer.addEventListener('mousedown', onMouseDown);
        });

        window.addEventListener('blur', onMouseUp);

        let resizeTimeout;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(() => {
            const containerWidth = container.offsetWidth;
            const panes = Array.from(container.querySelectorAll(':scope > .pane'));
            let availableWidth = containerWidth;
            
            panes.forEach((pane, index) => {
              if (index === panes.length - 1) {
                pane.style.flex = '1 1 auto';
                pane.style.width = 'auto';
              } else {
                const minWidth = parseInt(pane.style.minWidth) || 200;
                pane.style.width = `${minWidth}px`;
                pane.style.flex = '0 0 auto';
                availableWidth -= minWidth;
              }
            });
          }, 100);
        });
      }

      document.addEventListener('DOMContentLoaded', initializeResizers);
    </script>
  </body>
</html>
